// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "DriveTrain.h"
#include "../Robotmap.h"
#include "Math.h"
DriveTrain::DriveTrain() : Subsystem("DriveTrain") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	frontLeftPos = RobotMap::driveTrainFrontLeftPos;
	frontLeftSteer = RobotMap::driveTrainFrontLeftSteer;
	frontLeft = RobotMap::driveTrainFrontLeft;
	frontRightPos = RobotMap::driveTrainFrontRightPos;
	frontRightSteer = RobotMap::driveTrainFrontRightSteer;
	frontRight = RobotMap::driveTrainFrontRight;
	rearLeftPos = RobotMap::driveTrainRearLeftPos;
	rearLeftSteer = RobotMap::driveTrainRearLeftSteer;
	rearLeft = RobotMap::driveTrainRearLeft;
	rearRightPos = RobotMap::driveTrainRearRightPos;
	rearRightSteer = RobotMap::driveTrainRearRightSteer;
	rearRight = RobotMap::driveTrainRearRight;
	gyro = RobotMap::driveTrainGyro;
	frontLeftDrive = RobotMap::driveTrainFrontLeftDrive;
	frontRightDrive = RobotMap::driveTrainFrontRightDrive;
	rearLeftDrive = RobotMap::driveTrainRearLeftDrive;
	rearRightDrive = RobotMap::driveTrainRearRightDrive;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	GyroZeroFlag = false;
	GyroZeroTime = GetClock();
	FLInv = 1;
	FRInv = 1;
	RRInv = 1;
	RLInv = 1;
	driveFront = true;
}
    
void DriveTrain::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
void DriveTrain::SetWheelbase(float w, float x, float y) {
	W=w;
	X=x;
	Y=y;
}
void DriveTrain::SetOffsets(double FLOff, double FROff, double RLOff, double RROff) {
	FLOffset = FLOff;
	FROffset = FROff;
	RLOffset = RLOff;
	RROffset = RROff;
}
void DriveTrain::ToggleFrontBack(){
	driveFront = !driveFront;
}
void DriveTrain::Crab(float twist, float y, float x, bool UseGyro) {
	
	robotangle = (gyro->GetAngle())*pi/180;
	
	float FWD = y;
	float STR = x;
	if(UseGyro)
	{
		FWD = y*cos(robotangle) + x*sin(robotangle);
		STR = -y*sin(robotangle) + x*cos(robotangle);
	}		
		
	radius = sqrt(pow(2*Y,2)+pow(X,2));
	
	AP = STR - twist*X/radius;
	BP = STR + twist*X/radius;
	CP = FWD - twist*2*Y/radius;
	DP = FWD + twist*2*Y/radius;
	
	float FLSetPoint = 2.5;
	float FRSetPoint = 2.5;
	float RLSetPoint = 2.5;
	float RRSetPoint = 2.5;
	
	if(DP != 0 || BP != 0)
		FLSetPoint = (2.5 + 2.5/pi*atan2(BP,DP));
	if(BP != 0 || CP != 0)	
		FRSetPoint = (2.5 + 2.5/pi*atan2(BP,CP));
	if(AP != 0 || DP != 0)
		RLSetPoint = (2.5 + 2.5/pi*atan2(AP,DP));
	if(AP != 0 || CP != 0)
		RRSetPoint = (2.5 + 2.5/pi*atan2(AP,CP));
	
	
	SetSteerSetpoint(FLSetPoint, FRSetPoint, RLSetPoint, RRSetPoint);
	FL = sqrt(pow(BP,2)+pow(DP,2));
	FR = sqrt(pow(BP,2)+pow(CP,2));
	RL = sqrt(pow(AP,2)+pow(DP,2));
	RR = sqrt(pow(AP,2)+pow(CP,2));
	
	
	//Solve for fastest wheel speed
	double speedarray[] = {fabs(FL), fabs(FR), fabs(RL), fabs(RR)};
		
	 int length = 4;
     double maxspeed = speedarray[0];
     for(int i = 1; i < length; i++)
     {
          if(speedarray[i] > maxspeed)
                maxspeed = speedarray[i];
     }
		 
	//Set ratios based on maximum wheel speed
    if(maxspeed > 1 || maxspeed < -1)
    {
		FLRatio = FL/maxspeed;
		FRRatio = FR/maxspeed;
		RLRatio = RL/maxspeed;
		RRRatio = RR/maxspeed;
    }
    else
    {
		FLRatio = FL;
		FRRatio = FR;
		RLRatio = RL;
		RRRatio = RR;
    }
    
	//Set drive speeds
	SetDriveSpeed(FLRatio, -FRRatio, RLRatio, -RRRatio);
	
}
void DriveTrain::Steer(float radian, float speed, float a) {
	
	A=a;
	
	thetaRC = pi - radian;  //convert steering angle to rear center wheel angle
	
	if(thetaRC != pi / 2)	//If we are not driving straight forward...
	{
		if(thetaRC < pi / 2)	//Right Turn
		{
			RightTurn4Wheels();
		}
		else if(thetaRC > pi / 2)	//Left Turn
		{
			LeftTurn4Wheels();
		}
	}
	else	//thetaRC = pi / 2
	{
		thetaFL = pi / 2;
		thetaFR = pi / 2;
		thetaRL = pi / 2;
		thetaRR = pi / 2;
		FLRatio = 1;
		FRRatio = 1;
		RLRatio = 1;
		RRRatio = 1;
	}
	//Solve for fastest wheel speed
	double speedarray[] = {fabs(FL), fabs(FR), fabs(RL), fabs(RR)};
		
	 int length = 4;
     double maxspeed = speedarray[0];
     for(int i = 1; i < length; i++)
     {
          if(speedarray[i] > maxspeed)
                maxspeed = speedarray[i];
     }
		 
	//Set ratios based on maximum wheel speed
	FLRatio = FL/maxspeed;
	FRRatio = FR/maxspeed;
	RLRatio = RL/maxspeed;
	RRRatio = RR/maxspeed;
	
	//Set drive speeds
	SetDriveSpeed(-FLRatio*speed, FRRatio*speed, -RLRatio*speed, RRRatio*speed);
	
	//Set Steering PID Setpoints
	float FLSetPoint = (1.25 + 2.5/pi*thetaFL);
	float FRSetPoint = (1.25 + 2.5/pi*thetaFR);
	float RLSetPoint = (1.25 + 2.5/pi*thetaRL);
	float RRSetPoint = (1.25 + 2.5/pi*thetaRR);
	
	SetSteerSetpoint(FLSetPoint, FRSetPoint, RLSetPoint, RRSetPoint);
	}
void DriveTrain::LeftTurn4Wheels()
{
	Z = ((A * X) * tan(pi - thetaRC));				//find turning radius
	
	//calculate angles based on turning radius
	thetaRL = pi - atan((Z - W) / (A * X));
	thetaRR = pi - atan((Z + W) / (A * X));
	thetaFR = pi / 2;
	thetaFL = pi / 2;
	
	if(A != 1) //not turning about front wheels
	{
		thetaFL = atan((Z - Y) / ((1 - A) * X));	//These are identical for right and left turns
		thetaFR = atan((Z + Y) / ((1 - A) * X));	//These are identical for right and left turns
	}
	//Solve each wheel turning radii (wheel speed)
	FL = (Z - Y) / sin(thetaFL);
	FR = (Z + Y) / sin(thetaFR);
	RL = (Z - W) / sin(pi - thetaRL);
	RR = (Z + W) / sin(pi - thetaRR);
}
void DriveTrain::RightTurn4Wheels()
{	
	Z = ((A * X) * tan(thetaRC));				//find turning radius
	
	//calculate angles based on turning radius
	thetaRL = atan((Z + W) / (A * X));
	thetaRR = atan((Z - W) / (A * X));
	thetaFR = pi / 2;
	thetaFL = pi / 2;
	
	
	if(A != 1)  //not turning about front wheels
	{
		thetaFR = pi - atan((Z - Y) / ((1 - A) * X));	//These are identical for right and left turns
		thetaFL = pi - atan((Z + Y) / ((1 - A) * X));	//These are identical for right and left turns
	}
	
	//Solve each wheel turning radii (wheel speed)
	FL = (Z + Y) / sin(pi - thetaFL);
	FR = (Z - Y) / sin(pi - thetaFR);
	RL = (Z + W) / sin(thetaRL);
	RR = (Z - W) / sin(thetaRR);
}
double DriveTrain::CorrectSteerSetpoint(double setpoint) {
//Used to correct steering setpoints to within the 0 to 5 V scale 
	
if (setpoint < 0)
{
	return setpoint + 5;
}
else if (setpoint > 5)
{
	return setpoint - 5;
}
else if (setpoint == 5)
{
	return 0;
}
else
{
	return setpoint;
}
}
void DriveTrain::SetSteerSetpoint(float FLSetPoint, float FRSetPoint, float RLSetPoint, float RRSetPoint)
{	
//Actually sets the setpoints for all wheels using the correct offsets and driving direction (driveFront)
//Wheel speed directions will be inverted if it is closer to turn the wheel 180 deg off from actual setpoint
	
	SmartDashboard::PutNumber("FLInv",FLInv);
	SmartDashboard::PutNumber("FRInv",FRInv);
	SmartDashboard::PutNumber("RLInv",RLInv);
	SmartDashboard::PutNumber("RRInv",RRInv);
	
	if(driveFront) {
		
		if(fabs(FLSetPoint + FLOffset - frontLeftPos->GetAverageVoltage()) < 1.25 || fabs(FLSetPoint + FLOffset - frontLeftPos->GetAverageVoltage()) > 3.75)
		{
			frontLeft->SetSetpoint(CorrectSteerSetpoint(FLSetPoint + FLOffset));
			FLInv = 1;
		}
			else
		{
			frontLeft->SetSetpoint(CorrectSteerSetpoint(FLSetPoint + FLOffset-2.5));
			FLInv = -1;
		}
		
		if(fabs(FRSetPoint + FROffset - frontRightPos->GetAverageVoltage()) < 1.25 || fabs(FRSetPoint + FROffset - frontRightPos->GetAverageVoltage()) > 3.75)
		{
			frontRight->SetSetpoint(CorrectSteerSetpoint(FRSetPoint + FROffset));
			FRInv = 1;
		}
			else
		{
			frontRight->SetSetpoint(CorrectSteerSetpoint(FRSetPoint + FROffset-2.5));
			FRInv = -1;
		}
		
		if(fabs(RLSetPoint + RLOffset - rearLeftPos->GetAverageVoltage()) < 1.25 || fabs(RLSetPoint + RLOffset - rearLeftPos->GetAverageVoltage()) > 3.75)
		{
			rearLeft->SetSetpoint(CorrectSteerSetpoint(RLSetPoint + RLOffset));
			RLInv = 1;
		}
			else
		{
			rearLeft->SetSetpoint(CorrectSteerSetpoint(RLSetPoint + RLOffset-2.5));
			RLInv = -1;
		}
		
		if(fabs(RRSetPoint + RROffset - rearRightPos->GetAverageVoltage()) < 1.25 || fabs(RRSetPoint + RROffset - rearRightPos->GetAverageVoltage()) > 3.75)
		{
			rearRight->SetSetpoint(CorrectSteerSetpoint(RRSetPoint + RROffset));
			RRInv = 1;
		}
			else
		{
			rearRight->SetSetpoint(CorrectSteerSetpoint(RRSetPoint + RROffset-2.5));
			RRInv = -1;
		}
	
	}
	
	else {
	
		if(fabs(RRSetPoint + FLOffset - frontLeftPos->GetAverageVoltage()) < 1.25 || fabs(RRSetPoint + FLOffset - frontLeftPos->GetAverageVoltage()) > 3.75)
		{
			frontLeft->SetSetpoint(CorrectSteerSetpoint(RRSetPoint + FLOffset));
			FLInv = 1;
		}
			else
		{
			frontLeft->SetSetpoint(CorrectSteerSetpoint(RRSetPoint + FLOffset-2.5));
			FLInv = -1;
		}
		
		if(fabs(RLSetPoint + FROffset - frontRightPos->GetAverageVoltage()) < 1.25 || fabs(RLSetPoint + FROffset - frontRightPos->GetAverageVoltage()) > 3.75)
		{
			frontRight->SetSetpoint(CorrectSteerSetpoint(RLSetPoint + FROffset));
			FRInv = 1;
		}
			else
		{
			frontRight->SetSetpoint(CorrectSteerSetpoint(RLSetPoint + FROffset-2.5));
			FRInv = -1;
		}
		
		if(fabs(FRSetPoint + RLOffset - rearLeftPos->GetAverageVoltage()) < 1.25 || fabs(FRSetPoint + RLOffset - rearLeftPos->GetAverageVoltage()) > 3.75)
		{
			rearLeft->SetSetpoint(CorrectSteerSetpoint(FRSetPoint + RLOffset));
			RLInv = 1;
		}
			else
		{
			rearLeft->SetSetpoint(CorrectSteerSetpoint(FRSetPoint + RLOffset-2.5));
			RLInv = -1;
		}
		
		if(fabs(FLSetPoint + RROffset - rearRightPos->GetAverageVoltage()) < 1.25 || fabs(FLSetPoint + RROffset - rearRightPos->GetAverageVoltage()) > 3.75)
		{
			rearRight->SetSetpoint(CorrectSteerSetpoint(FLSetPoint + RROffset));
			RRInv = 1;
		}
			else
		{
			rearRight->SetSetpoint(CorrectSteerSetpoint(FLSetPoint + RROffset-2.5));
			RRInv = -1;
		}
	}
		
		
}
void DriveTrain::SetDriveSpeed(float FLSpeed, float FRSpeed, float RLSpeed, float RRSpeed) {
//applies inversion variables defined in SetSteerSetPoint function	
	if(driveFront) {
		frontLeftDrive->Set(FLSpeed*FLInv);
		frontRightDrive->Set(FRSpeed*FRInv);
		rearLeftDrive->Set(RLSpeed*RLInv);
		rearRightDrive->Set(RRSpeed*RRInv);
	}
	else {
		frontLeftDrive->Set(RRSpeed*FLInv);
		frontRightDrive->Set(RLSpeed*FRInv);
		rearLeftDrive->Set(FRSpeed*RLInv);
		rearRightDrive->Set(FLSpeed*RRInv);
	}
}
void DriveTrain::Lock() //locks wheels to prevent robot movement
{
	SetSteerSetpoint(3.0, 1.5, 3.0, 1.5);
	SetDriveSpeed(0,0,0,0);
}
void DriveTrain::SideLock() //locks wheels to prevent robot movement
{
	SetSteerSetpoint(2.0, 0.75, 3.25, 4.5);
	SetDriveSpeed(0,0,0,0);
}
bool DriveTrain::ZeroGyro(float InitTime)  //performs gyro calibration
{
	bool Done = false;
	
	if(GyroZeroFlag == false)
	{
		GyroZeroFlag = true;
		GyroZeroTime = GetClock();
	}
	else
	{
		if(GetClock() > GyroZeroTime + InitTime)
		{
//			gyro->InitGyro();
			GyroZeroFlag = false;
			Done = true;
		}
	}
	
	return GetClock() > GyroZeroTime + InitTime + 6;
}
