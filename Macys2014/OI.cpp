// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "OI.h"
#include "Math.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/SetWheelOffsets.h"
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
OI::OI() {
	// Process operator interface input here.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	driverJoystick = new Joystick(1);
	
     
        // SmartDashboard Buttons
	SmartDashboard::PutData("SetWheelOffsets", new SetWheelOffsets());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
Joystick* OI::getDriverJoystick() {
	return driverJoystick;
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
double OI::getScaledJoystickRadians() {
	double pi = 3.14159;
	double scaledRadians = pi/2;
	double scalingFactor = 1;
	double steerAngle = pi/2;
	double bottomScaling = 1.5;
	double topScaling = 1.75;
	
	
	steerAngle = driverJoystick->GetDirectionRadians();
	if(steerAngle > pi)
		steerAngle = pi;
	if(steerAngle < -pi)
		steerAngle = -pi;
	
	if(steerAngle < -pi/2)
		steerAngle = -pi/2 - steerAngle;
	else if(steerAngle < pi/2)
		steerAngle = pi/2 + steerAngle;
	else
		steerAngle = 3*pi/2 - steerAngle;
//	scalingFactor = driverJoystick->GetTwist()/2+1.5;
	
	scalingFactor = bottomScaling + driverJoystick->GetMagnitude()*(topScaling - bottomScaling);
	if (getDriverJoystick()->GetMagnitude() < .2)
		scaledRadians = pi/2;	
	else
	{
		if(steerAngle <= pi/2)
			scaledRadians = (-(pi/2)/pow(pow(-pi/2,2),scalingFactor/2))*pow(pow(steerAngle-pi/2,2),scalingFactor/2) + pi/2;
		else //if(steerAngle <= pi)
			scaledRadians = ((pi/2)/pow((pi/2),scalingFactor))*pow(steerAngle-pi/2,scalingFactor) + pi/2;
	}
	return scaledRadians;
}
double OI::getJoystickMagnitude() {
	if(getDriverJoystick()->GetMagnitude() < .1)
		return 0;
	else
		if (Robot::oi->getDriverJoystick()->GetY()<0)
			return -getDriverJoystick()->GetMagnitude();
		else
			return getDriverJoystick()->GetMagnitude();
}
double OI::getJoystickTwist() {
	if(fabs(getDriverJoystick()->GetZ()) < .1)
			return 0;
	else
		return getDriverJoystick()->GetZ()/2;
}
double OI::getJoystickX() {
	if (fabs(getDriverJoystick()->GetX()) < .1)
		return 0;
	else
		return getDriverJoystick()->GetX();
}
double OI::getJoystickY() {
	if (fabs(getDriverJoystick()->GetY()) < .1)
		return 0;
	else
		return getDriverJoystick()->GetY();
}
